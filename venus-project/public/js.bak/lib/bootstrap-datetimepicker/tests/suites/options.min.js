module("Options", {setup: function () {
}, teardown: function () {
    return;
    $("#qunit-fixture *").each(function () {
        var a = $(this);
        if ("datetimepicker" in a.data()) {
            a.data("datetimepicker").picker.remove()
        }
    })
}});
test("Autoclose", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", autoclose: true, minView: 2, viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.is(":visible"), "Picker is visible");
    c = b.find(".datetimepicker-days tbody td:nth(7)");
    equal(c.text(), "4");
    c.click();
    ok(b.is(":not(:visible)"), "Picker is hidden");
    datesEqual(d.date, UTCDate(2012, 2, 4));
    datesEqual(d.viewDate, UTCDate(2012, 2, 4))
});
test("Startview: year view (integer)", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", startView: 3, viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":not(:visible)"), "Days view hidden");
    ok(b.find(".datetimepicker-months").is(":visible"), "Months view visible");
    ok(b.find(".datetimepicker-years").is(":not(:visible)"), "Years view hidden")
});
test("Startview: year view (string)", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", startView: "year", viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":not(:visible)"), "Days view hidden");
    ok(b.find(".datetimepicker-months").is(":visible"), "Months view visible");
    ok(b.find(".datetimepicker-years").is(":not(:visible)"), "Years view hidden")
});
test("Startview: decade view (integer)", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", startView: 4}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":not(:visible)"), "Days view hidden");
    ok(b.find(".datetimepicker-months").is(":not(:visible)"), "Months view hidden");
    ok(b.find(".datetimepicker-years").is(":visible"), "Years view visible")
});
test("Startview: decade view (string)", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", startView: "decade"}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":not(:visible)"), "Days view hidden");
    ok(b.find(".datetimepicker-months").is(":not(:visible)"), "Months view hidden");
    ok(b.find(".datetimepicker-years").is(":visible"), "Years view visible")
});
test("Today Button: today button not default", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd"}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":visible"), "Days view visible");
    ok(b.find(".datetimepicker-days tfoot .today").is(":not(:visible)"), "Today button not visible")
});
test("Today Button: today visibility when enabled", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", todayBtn: true}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":visible"), "Days view visible");
    ok(b.find(".datetimepicker-days tfoot .today").is(":visible"), "Today button visible");
    b.find(".datetimepicker-days thead th.switch").click();
    ok(b.find(".datetimepicker-months").is(":visible"), "Months view visible");
    ok(b.find(".datetimepicker-months tfoot .today").is(":visible"), "Today button visible");
    b.find(".datetimepicker-months thead th.switch").click();
    ok(b.find(".datetimepicker-years").is(":visible"), "Years view visible");
    ok(b.find(".datetimepicker-years tfoot .today").is(":visible"), "Today button visible")
});
test("Today Button: data-api", function () {
    var a = $('<input data-date-today-btn="true" />').appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd"}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days").is(":visible"), "Days view visible");
    ok(b.find(".datetimepicker-days tfoot .today").is(":visible"), "Today button visible")
});
test("Today Button: moves to today's date", function () {
    var b = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", todayBtn: true}), g = b.data("datetimepicker"), c = g.picker, e;
    b.focus();
    ok(c.find(".datetimepicker-days").is(":visible"), "Days view visible");
    ok(c.find(".datetimepicker-days tfoot .today").is(":visible"), "Today button visible");
    e = c.find(".datetimepicker-days tfoot .today");
    e.click();
    var f = new Date(), a = UTCDate(f.getFullYear(), f.getMonth(), f.getDate(), f.getHours(), f.getMinutes(), f.getSeconds());
    datesEqual(g.viewDate, a)
});
test('Today Button: "linked" selects today\'s date', function () {
    var b = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", todayBtn: "linked"}), g = b.data("datetimepicker"), c = g.picker, e;
    b.focus();
    ok(c.find(".datetimepicker-days").is(":visible"), "Days view visible");
    ok(c.find(".datetimepicker-days tfoot .today").is(":visible"), "Today button visible");
    e = c.find(".datetimepicker-days tfoot .today");
    e.click();
    var f = new Date(), a = UTCDate(f.getFullYear(), f.getMonth(), f.getDate(), f.getHours(), f.getMinutes(), f.getSeconds());
    datesEqual(g.viewDate, a);
    datesEqual(g.date, a)
});
test("Today Highlight: today's date is not highlighted by default", patch_date(function (a) {
    a.now = UTCDate(2012, 2, 15);
    var b = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd"}), e = b.data("datetimepicker"), c = e.picker, d;
    b.focus();
    ok(c.find(".datetimepicker-days").is(":visible"), "Days view visible");
    equal(c.find(".datetimepicker-days thead .switch").text(), "March 2012", 'Title is "March 2012"');
    d = c.find(".datetimepicker-days tbody td:contains(15)");
    ok(!d.hasClass("today"), 'Today is not marked with "today" class');
    d = c.find(".datetimepicker-days tbody td:contains(14)");
    ok(!d.hasClass("today"), 'Yesterday is not marked with "today" class');
    d = c.find(".datetimepicker-days tbody td:contains(16)");
    ok(!d.hasClass("today"), 'Tomorrow is not marked with "today" class')
}));
test("Today Highlight: today's date is highlighted when not active", patch_date(function (a) {
    a.now = new a(2012, 2, 15);
    var b = $("<input />").appendTo("#qunit-fixture").val("2012-03-05").datetimepicker({format: "yyyy-mm-dd", todayHighlight: true}), e = b.data("datetimepicker"), c = e.picker, d;
    b.focus();
    ok(c.find(".datetimepicker-days").is(":visible"), "Days view visible");
    equal(c.find(".datetimepicker-days thead .switch").text(), "March 2012", 'Title is "March 2012"');
    d = c.find(".datetimepicker-days tbody td:contains(15)");
    ok(d.hasClass("today"), 'Today is marked with "today" class');
    d = c.find(".datetimepicker-days tbody td:contains(14)");
    ok(!d.hasClass("today"), 'Yesterday is not marked with "today" class');
    d = c.find(".datetimepicker-days tbody td:contains(16)");
    ok(!d.hasClass("today"), 'Tomorrow is not marked with "today" class')
}));
test("DaysOfWeekDisabled", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2012-10-26").datetimepicker({format: "yyyy-mm-dd", daysOfWeekDisabled: "1,5"}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    c = b.find(".datetimepicker-days tbody td:nth(22)");
    ok(c.hasClass("disabled"), "Day of week is disabled");
    c = b.find(".datetimepicker-days tbody td:nth(24)");
    ok(!c.hasClass("disabled"), "Day of week is enabled");
    c = b.find(".datetimepicker-days tbody td:nth(26)");
    ok(c.hasClass("disabled"), "Day of week is disabled")
});
test("startDate: Custom value", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2013-01-25").datetimepicker({format: "yyyy-mm-dd", startView: 2, startDate: "2013-01-24 15:30", viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days tbody tr:nth(3) td:nth(2)").hasClass("disabled"), "The previous day is disabled");
    c = b.find(".datetimepicker-days tbody tr:nth(3) td:nth(4)");
    ok(!c.hasClass("disabled"), "The starting day is enabled");
    c.click();
    ok(b.find(".datetimepicker-hours tbody span:nth(14)").hasClass("disabled"), "The previous hour is disabled");
    c = b.find(".datetimepicker-hours tbody span:nth(15)");
    ok(!c.hasClass("disabled"), "The starting hour is enabled");
    c.click();
    ok(b.find(".datetimepicker-minutes tbody span:nth(5)").hasClass("disabled"), "The previous minute is disabled");
    ok(!b.find(".datetimepicker-minutes tbody span:nth(6)").hasClass("disabled"), "The starting minute is enabled")
});
test("startDate: Custom value", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2013-01-25").datetimepicker({format: "yyyy-mm-dd", startView: 2, startDate: "2013-01-24 15:30", viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days tbody tr:nth(3) td:nth(3)").hasClass("disabled"), "The previous day is disabled");
    c = b.find(".datetimepicker-days tbody tr:nth(3) td:nth(4)");
    ok(!c.hasClass("disabled"), "The starting day is enabled");
    c.click();
    ok(b.find(".datetimepicker-hours tbody span:nth(14)").hasClass("disabled"), "The previous hour is disabled");
    c = b.find(".datetimepicker-hours tbody span:nth(15)");
    ok(!c.hasClass("disabled"), "The starting hour is enabled");
    c.click();
    ok(b.find(".datetimepicker-minutes tbody span:nth(5)").hasClass("disabled"), "The previous minute is disabled");
    ok(!b.find(".datetimepicker-minutes tbody span:nth(6)").hasClass("disabled"), "The starting minute is enabled")
});
test("endDate: Custom value", function () {
    var a = $("<input />").appendTo("#qunit-fixture").val("2013-01-25").datetimepicker({format: "yyyy-mm-dd", startView: 2, endDate: "2013-01-24 15:30", viewSelect: 2}), d = a.data("datetimepicker"), b = d.picker, c;
    a.focus();
    ok(b.find(".datetimepicker-days tbody tr:nth(3) td:nth(5)").hasClass("disabled"), "The next day is disabled");
    c = b.find(".datetimepicker-days tbody tr:nth(3) td:nth(4)");
    ok(!c.hasClass("disabled"), "The last day is enabled");
    c.click();
    ok(b.find(".datetimepicker-hours tbody span:nth(16)").hasClass("disabled"), "The next hour is disabled");
    c = b.find(".datetimepicker-hours tbody span:nth(15)");
    ok(!c.hasClass("disabled"), "The last hour is enabled");
    c.click();
    ok(b.find(".datetimepicker-minutes tbody span:nth(7)").hasClass("disabled"), "The next minute is disabled");
    ok(!b.find(".datetimepicker-minutes tbody span:nth(6)").hasClass("disabled"), "The last minute is enabled")
});