<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
	<title>Clay - A 3D engine on canvas</title>
	
	<script type="text/javascript" src="static/clay.js"></script>

	
	<script type="text/javascript">
	
	function Earth() {
		
		var stage = new Clay.Stage(800, 600);
		var world = stage.getWorld();
		var camera = stage.getCamera();

		camera.set(0,0,0);
		camera.setResolution(800, 600);
		camera.setTarget(new Clay.Vector(-100,0,100));
		
		window.onresize = function() {
			stage.resizeTo(
				window.innerWidth || document.documentElement.clientWidth,
				window.innerHeight || document.documentElement.clientHeight
			);
		};
		
		window.onresize();

		Clay.Collada.load('static/earth.xml', function(scene) {
			scene.init(stage);

			var earth = new Clay.Texture('static/earthmap1k.jpg', stage);
			
			var clouds = new Image();
			clouds.src = 'static/earthclouds1k.png';

			var dark = new Image();
			dark.src = 'static/darkside.png';

			var waiting = setInterval(function(){
				if (earth.complete && clouds.complete && dark.complete){
					clearInterval(waiting);
					play();
				}
			}, 1000);

			function play() {
				var shape = world.getShapes()[0];
				shape.setMaterial(earth);

				var x, y, z, t = Math.PI/4, r = 0, tick = 0.01, radius = 200;
				var ttx = earth.canvas.getContext('2d');
				var base = earth.image;
				var wind = 0;
				
				stage.addEvent('enterframe', function(){

					var pos = (++wind)%1000;
					ttx.drawImage(base, pos,0);
					ttx.drawImage(base, pos-1000,0);
					ttx.drawImage(clouds, pos, 0);
					ttx.drawImage(clouds, pos-1000, 0);
					ttx.drawImage(dark, 0,0);

					t += tick;
					x = -100 + Math.sin(t) * radius;
					z = 100 + Math.cos(t) * radius;
					y = Math.cos(t/3) * 50
					camera.set(0 ,0 ,0 );
				});

				stage.run();
			}
		});
	}

	window.addEventListener('load', function(){
		new Earth();
	}, false);


	</script>



	<style type="text/css">
	html,body {
		width:100%;
		height:100%;
		margin:0;
		padding:0;
		position:relative;
		background:black;
	}

	.canvas3D {
		background:black;
		position:absolute;
		left:0;
		top:0;
	}

	</style>

</head>
<body>
<div class="tagBall">
	<a class="tag" target="_blank" href="http://www.17sucai.com/">item1</a>
	<a class="tag" target="_blank" href="http://www.17sucai.com/" angle-x="0.01785" angle-y="-0.0217">item2</a>
</div>
	<div id="canvas" >
		<!-- canvas, centered on screen  -->
	</div>

<!--	<script src="static/urchin.js" type="text/javascript"></script>
	<script type="text/javascript">
		_uacct="UA-472607-1"; urchinTracker();
	</script>-->
<style>
	.tagBall{height:100%; width:100%;margin:0 auto;position:absolute; overflow: hidden;}
	.tag{display:block;position:absolute;left:0px;top:0px;color:#000;text-decoration:none;font-size:15px;font-family:"????";font-weight:bold;}
	.tag:hover{border:1px solid #666;}
</style>
<script type="text/javascript">
	var tagEle = "querySelectorAll" in document ? document.querySelectorAll(".tag") : getClass("tag"),
			paper = "querySelectorAll" in document ? document.querySelector(".tagBall") : getClass("tagBall")[0];
			RADIUS =300,
			fallLength = 500,
			tags = [],
			angleX = 0.00785,
			angleY = -0.0098,
			CX = paper.offsetWidth/2,
			CY = paper.offsetHeight/2,
			EX = paper.offsetLeft + document.body.scrollLeft + document.documentElement.scrollLeft,
			EY = paper.offsetTop + document.body.scrollTop + document.documentElement.scrollTop;

	function getClass(className){
		var ele = document.getElementsByTagName("*");
		var classEle = [];
		for(var i=0;i<ele.length;i++){
			var cn = ele[i].className;
			if(cn === className){
				classEle.push(ele[i]);
			}
		}
		return classEle;
	}

	function innit(){
		for(var i=0;i<tagEle.length;i++){

			var angleX = tagEle[i].getAttribute('angle-x') ;
			var angleY = tagEle[i].getAttribute('angle-y') ;

			var a , b;
			var k = (2*(i+1)-1)/tagEle.length - 1;
			var a = Math.acos(k);
			var b = a*Math.sqrt(tagEle.length*Math.PI);
			// var a = Math.random()*2*Math.PI;
			// var b = Math.random()*2*Math.PI;
			var x = RADIUS * Math.sin(a) * Math.cos(b);
			var y = RADIUS * Math.sin(a) * Math.sin(b);
			var z = RADIUS * Math.cos(a);
			var t = new tag(tagEle[i] , x , y , z);
			t.angleX = angleX || 0.00785;
			t.angleY = angleY || -0.0098;
			tagEle[i].style.color = "rgb("+parseInt(Math.random()*255)+","+parseInt(Math.random()*255)+","+parseInt(Math.random()*255)+")";
			tags.push(t);
			t.move();
		}
	}

	Array.prototype.forEach = function(callback){
		for(var i=0;i<this.length;i++){
			callback.call(this[i]);
		}
	}

	function animate(){
		setInterval(function(){
			rotateX();
			rotateY();
			tags.forEach(function(){
				this.move();
			})
		} , 17)
	}

	if("addEventListener" in window){
		paper.addEventListener("mousemove" , function(event){
			var x = event.clientX - EX - CX;
			var y = event.clientY - EY - CY;
			// angleY = -x* (Math.sqrt(Math.pow(x , 2) + Math.pow(y , 2)) > RADIUS/4 ? 0.0002 : 0.0001);
			// angleX = -y* (Math.sqrt(Math.pow(x , 2) + Math.pow(y , 2)) > RADIUS/4 ? 0.0002 : 0.0001);
			angleY = x*0.0001;
			angleX = y*0.0001;
		});
	}
	else {
		paper.attachEvent("onmousemove" , function(event){
			var x = event.clientX - EX - CX;
			var y = event.clientY - EY - CY;
			angleY = x*0.0001;
			angleX = y*0.0001;
		});
	}

	function rotateX(){

		tags.forEach(function(){
			var cos = Math.cos(this.angleX);
			var sin = Math.sin(this.angleX);
			var cos = Math.cos(angleX);
			var sin = Math.sin(angleX);
			var y1 = this.y * cos - this.z * sin;
			var z1 = this.z * cos + this.y * sin;
			this.y = y1;
			this.z = z1;
		})

	}

	function rotateY(){

		tags.forEach(function(){
			var cos = Math.cos(this.angleY);
			var sin = Math.sin(this.angleY);
			var cos = Math.cos(angleX);
			var sin = Math.sin(angleX);
			var x1 = this.x * cos - this.z * sin;
			var z1 = this.z * cos + this.x * sin;
			this.x = x1;
			this.z = z1;
		})
	}

	var tag = function(ele , x , y , z){
		this.ele = ele;
		this.x = x;
		this.y = y;
		this.z = z;
	}

	tag.prototype = {
		move:function(){

			console.log(angleX)
			console.log(angleY)

			var scale = fallLength/(fallLength-this.z);
			var alpha = (this.z+RADIUS)/(2*RADIUS);
			this.ele.style.fontSize = 15 * scale + "px";
			this.ele.style.opacity = alpha+0.5;
			this.ele.style.filter = "alpha(opacity = "+(alpha+0.5)*100+")";
			this.ele.style.zIndex = parseInt(scale*100);
			this.ele.style.left = this.x + CX - this.ele.offsetWidth/2 +"px";
			this.ele.style.top = this.y + CY - this.ele.offsetHeight/2 +"px";
		}
	}
	innit();
	animate();
</script>


</body>
</html>