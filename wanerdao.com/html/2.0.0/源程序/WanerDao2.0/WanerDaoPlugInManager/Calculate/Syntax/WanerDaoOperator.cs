using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using WanerDao2.WanerDaoPlugInManager.Calculate.Phrase;

namespace WanerDao2.WanerDaoPlugInManager.Calculate.Syntax
{
    /// <summary>
    /// 算法类
    /// </summary>
    public class WanerDaoOperator
    {
        //绝对优先级表
        private static int[,] _priorityTable =
		{
			//0,1,2,...，每10个一空
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//unknown
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,2,2,0,0,2, 2,2,2,2,2,2,2,2,0,2},	//ln
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,2,2,0,0,2, 2,2,2,2,2,2,2,2,0,2},	//lg
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//log
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//pow

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//cbrt
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//sbrt
			{0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},   //!
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//sin
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//cos
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//sinh
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//cosh
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//tg

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//ctg
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//tanh
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//ctgh
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//plus
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//minus

			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//time
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//divide
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,2,2,0,0,2, 2,2,2,2,2,2,2,2,0,0},	//mod
			{0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,0,2,3,2,0,0,2, 2,2,2,2,2,2,2,2,0,2},	//(

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//)
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ans
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//sto
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//clr
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ax

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//bx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//cx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//dx
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ex
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//fx

			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//e
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//pi
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//number
			{0,2,2,2,2,0,2,2,2,2, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,3,2},	//sharp
            {0,2,2,0,0,0,2,2,0,2, 2,2,2,2,2,2,2,2,0,0, 0,0,0,2,2,2,2,0,2,2, 2,2,2,2,2,2,2,2,0,2},	//negative
		};
        //相对优先级表
        private static int[,] _priorityTable2 =
		{
			//0,1,2,...，每10个一空
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//unknown
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//ln
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//lg
			{0,2,2,1,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//log
			{0,2,2,2,1,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,1,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//pow

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//cbrt
			{0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//sbrt
			{0,0,0,0,0,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},   //!
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//sin
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//cos
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//sinh
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//cosh
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//tg

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//ctg
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//tanh
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//ctgh
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 2,2,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//plus
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 2,2,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//minus

			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//time
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,2,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//divide
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//reserved
			{0,0,0,0,0,0,0,0,2,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//mod
			{0,2,2,2,2,0,2,2,2,0, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,3,2,0,0,0, 0,0,0,0,0,0,0,0,1,2},	//(

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//)
			{0,0,0,1,1,0,0,0,1,0, 0,0,0,0,0,0,0,0,1,1, 1,1,0,1,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,1,0},	//ans
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//sto
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//clr
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//ax

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//bx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//cx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//dx
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//ex
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//fx

			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//e
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//pi
			{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},	//number
			{0,2,2,2,2,0,2,2,2,2, 2,2,2,2,2,2,2,2,2,2, 2,2,0,2,2,2,0,2,2,2, 2,2,2,2,2,2,2,2,3,2},	//sharp
            {0,2,2,0,0,0,2,2,0,0, 2,2,2,2,2,2,2,2,1,1, 1,1,0,0,2,1,2,0,0,0, 0,0,0,0,0,0,0,0,1,2}	//negative
		};


        /// <summary>
        /// 根据运算符返回对应的运算目数
        /// </summary>
        /// <param name="Phrase">运算符</param>
        /// <returns>运算目数</returns>
        public static WanerDaoOperandType OperandCount(WanerDaoPhraseType pt)
        {
            //分析运算符的目数
            if (pt == WanerDaoPhraseType.cos || pt == WanerDaoPhraseType.sin || pt == WanerDaoPhraseType.sinh ||
                pt == WanerDaoPhraseType.cosh || pt == WanerDaoPhraseType.cosh || pt == WanerDaoPhraseType.ctgh ||
                pt == WanerDaoPhraseType.tanh || pt == WanerDaoPhraseType.cbrt || pt == WanerDaoPhraseType.sbrt ||
                pt == WanerDaoPhraseType.lg || pt == WanerDaoPhraseType.ln || pt == WanerDaoPhraseType.tan || pt == WanerDaoPhraseType.ctg || pt == WanerDaoPhraseType.fact || pt == WanerDaoPhraseType.negative)
                return WanerDaoOperandType.O1;
            else if (pt == WanerDaoPhraseType.divide || pt == WanerDaoPhraseType.plus || pt == WanerDaoPhraseType.minus ||
                pt == WanerDaoPhraseType.mutiple || pt == WanerDaoPhraseType.pow || pt == WanerDaoPhraseType.mod || pt == WanerDaoPhraseType.log)
                return WanerDaoOperandType.O2;
            else
                return WanerDaoOperandType.O0;
        }
        /// <summary>
        /// 前后邻近符号（包括运算符和数符）比较
        /// </summary>
        /// <param name="prePt">前一个符号</param>
        /// <param name="postPt">后一个符号</param>
        /// <returns>优先级比较值</returns>
        public static WanerDaoPriorityCmpType OperatorCmp(WanerDaoPhraseType prePt, WanerDaoPhraseType postPt)
        {
            int result = _priorityTable[(int)prePt, (int)postPt];
            return (WanerDaoPriorityCmpType)result;
        }
        /// <summary>
        /// 有间隔相邻符号比较（只包含数符）
        /// </summary>
        /// <param name="prePt">前一个符号</param>
        /// <param name="postPt">后一个符号</param>
        /// <returns>优先级比较值</returns>
        public static WanerDaoPriorityCmpType OperatorCmp2(WanerDaoPhraseType prePt, WanerDaoPhraseType postPt)
        {
            int result = _priorityTable2[(int)prePt, (int)postPt];
            return (WanerDaoPriorityCmpType)result;
        }
    }
}
